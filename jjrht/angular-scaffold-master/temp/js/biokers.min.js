/*! qding - v0.1.0 - * Copyright (c) 2014 lovemoon@yeah.net; Licensed GPLv2 */
// 定义Module需使用此方法 因为一个应用可能会打包多个模块
// 譬如将accountModule作为登录登出模块放置到其他模块中
// 注意：如果多模块整合可能会出现重名问题，后定义的服务会覆盖前面的
var Modules = {
  modules: [],

  register: function (name, requires, configFn) {
    this.modules.push(name);
    return angular.module(name, requires, configFn);
  },

  generator: function (name) {
    var module = angular.module(name);
    var service = name.replace(/Module$/, '') + 'Service';

    module.factory(service, function (serviceGenerator) {
      return serviceGenerator();
    });
  }
};

var app = angular.module('app', ['ui.router', 'ui.bootstrap', 'angular-growl', 'templates']);

// bootstrap
angular.element(document).ready(function () {
  angular.bootstrap(document, Modules.modules);
});

String(this).replace(/[A-Z]/g, function (match) {
  return ('-' + match.charAt(0));
});
// Avoid console errors in browsers that lack a console.
(function () {
  var method;
  var noop = function () {};
  var methods = [
    'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',
    'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',
    'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',
    'timeStamp', 'trace', 'warn'
  ];
  var length = methods.length;
  var console = (window.console = window.console || {});

  while (length--) {
    method = methods[length];

    // Only stub undefined methods.
    if (!console[method]) {
      console[method] = noop;
    }
  }
})();

// Make Array support indexOf and trim in ie7 and ie8
(function () {
  if (typeof Array.prototype.indexOf !== 'function') {
    Array.prototype.indexOf = function (obj) {
      for (var i = 0; i < this.length; i++) {
        if (this[i] === obj) {
          return i;
        }
      }
      return -1;
    };
  }

  if (typeof String.prototype.trim !== 'function') {
    String.prototype.trim = function () {
      return this.replace(/^\s+|\s+$/g, '');
    };
  }
})();

// 识别浏览器版本
(function () {
  var version = (function () {
    var v = 3,
      div = document.createElement('div'),
      all = div.getElementsByTagName('i');

    do {
      div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->';
    }
    while (all[0]);
    return v > 4 ? v : false;
  }());

  if (version) {
    var times = 0;
    (function addClass() {
      var root = document.getElementsByTagName('html')[0];
      if (root) {
        root.className += ' ie ie' + version;
      }
      else if (times++ < 2) {
        setTimeout(addClass, 200);
      }
    }());
  }

})();

/**
 * Converts an object to x-www-form-urlencoded serialization.
 * @param {Object} obj
 * @return {String}
 */
var serialize = function (obj) {
  var query = '';
  var name, value, fullSubName, subName, subValue, innerObj, i;

  for (name in obj) {
    if (obj.hasOwnProperty(name)) {
      value = obj[name];

      if (value instanceof Array) {
        for (i = 0; i < value.length; ++i) {
          subValue = value[i];
          fullSubName = name;
          innerObj = {};
          innerObj[fullSubName] = subValue;
          query += serialize(innerObj) + '&';
        }
      }
      else if (value instanceof Object) {
        for (subName in value) {
          if (value.hasOwnProperty(subName)) {
            subValue = value[subName];
            fullSubName = name + '[' + subName + ']';
            innerObj = {};
            innerObj[fullSubName] = subValue;
            query += serialize(innerObj) + '&';
          }
        }
      }
      else if (value !== undefined && value !== null) {
        query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
      }
    }
  }

  return query.length ? query.substr(0, query.length - 1) : query;
};
// 关闭HTML安全验证
app.config(['$sceProvider',
  function ($sceProvider) {
    $sceProvider.enabled(false);
  }
]);

// 配置ui-datepicker
app.config(function (datepickerConfig, datepickerPopupConfig) {
  datepickerConfig.showWeeks = false;
  datepickerPopupConfig.showButtonBar = false;
});

// 配置angular-growl
app.config(function (growlProvider) {
  growlProvider.onlyUniqueMessages(true);
  growlProvider.globalTimeToLive(4000);
  growlProvider.globalEnableHtml(false); // ngSanitize
});

// 配置ui-bootstrap
app.config(function (paginationConfig) {
  paginationConfig.directionLinks = true;
  paginationConfig.boundaryLinks = true;
  paginationConfig.maxSize = 10;
  paginationConfig.firstText = '首页';
  paginationConfig.lastText = '尾页';
  paginationConfig.previousText = '上一页';
  paginationConfig.nextText = '下一页';
});

// HTTP拦截器
app.config(function ($httpProvider) {
  // POST method use x-www-form-urlencoded Content-Type
  $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';

  // Override transformRequest to serialize form data like jquery
  $httpProvider.defaults.transformRequest = [

    function (data) {
      return angular.isObject(data) && String(data) !== '[object File]' ? serialize(data) : data;
    }
  ];

  // Add interceptor
  $httpProvider.interceptors.push(function ($q, growl, $rootScope) {
    return {
      request: function (config) {
        // REST 风格路由重写
        var rules = config.url.match(/:(\w+)/g);
        if (rules !== null) {
          angular.forEach(rules, function (rule) {
            var name = rule.substring(1);
            if (config.params && config.params.hasOwnProperty(name)) {
              config.url = config.url.replace(rule, config.params[name]);
              delete config.params[name];
            }
            else if (config.data && config.data.hasOwnProperty(name)) {
              config.url = config.url.replace(rule, config.data[name]);
              delete config.data[name];
            }
          });
        }
        return $q.when(config);
      },
      response: function (response) {
        if (angular.isObject(response.data)) {
          var res = response.data;
          // 兼容旧数据格式 {code:0, message: '', data: {...}} --> {code:200, data: {message: '', ...}}
          res.data = res.data || {};
          if (res.data.message || res.message) {
            res.data.message = res.data.message || res.message;
          }
          // 401是约定的未登录状态码 后面的条件是兼容老版本
          if (res.code === 401 || response.data.__ajax__error__back === 'login') {
            $rootScope.USER = null;
            $rootScope.$emit('loginRequired');
          }

          // 默认自动拆包
          if (response.config.$parsing !== false) {
            if ([0, 200].indexOf(res.code) !== -1) {
              return res.data;
            }
            else {
              return $q.reject(res.data);
            }
          }
          // 不拆包则返回服务器响应
          else {
            return $q.when(response.data);
          }
        }
        return $q.when(response);
      },
      requestError: function (rejection) {
        growl.addErrorMessage('请求异常，请刷新重试！', {
          ttl: -1
        });
        return $q.reject(rejection);
      },
      responseError: function (rejection) {
        growl.addErrorMessage('服务器异常，请刷新重试！', {
          ttl: -1
        });
        return $q.reject(rejection);
      }
    };
  });
});

// 获取静态域名
app.run(function ($rootScope) {
  var temp = document.createElement('a');
  temp.setAttribute('href', document.querySelector('link[rel="stylesheet"]').getAttribute('href'));
  $rootScope.$host = temp.protocol + '//' + temp.host;
});

// 注册事件
app.run(function ($rootScope) {

 
});

// 配置菜单
app.value('menubar', [{
      "id": 8000109000,
      "name": "经纪人管理",
      "href": "/works/biokers.html#biokers/bioker",
      "menus": [{
        "href": "/works/biokers.html#biokers/bioker",
        "name": "经纪人列表",
        "id": 8000109001
      }]
  }]
);
app.directive('csLayout', function ($rootScope) {
  return {
    restrict: 'A',
    replace: false,
    transclude: true,
    templateUrl: 'config/templates/layout.partial.html',
    link: function (scope, element, attrs) {
      // 例外名单：不需要登陆 不适用默认布局
      var excludes = ['account.login', 'account.logout'];

      var hyphenate = function (name) {
        return name.replace(/[._]/g, '-').replace(/([A-Z])/g, '-$1').toLowerCase();
      };

      $rootScope.$on('$stateChangeStart', function (e, state, params, source, srouceParams) {
        $rootScope.$user = {};
        $rootScope.$layout = excludes.indexOf(state.name) === -1;
        element.attr('class', hyphenate(state.name)).toggleClass('layout', $rootScope.$layout);
      });
    }
  };
});

/* 左侧菜单 */
app.directive('csMenubar', function ($rootScope, $state, menubar) {
  return {
    restrict: 'A',
    replace: false,
    templateUrl: 'config/templates/menubar.partial.html',
    link: function (scope, element, attrs) {
      scope.menubar = menubar;
      scope.toggleMenu = function (menu) {
        angular.forEach(menubar, function (item) {
          if (item !== menu) {
            item.active = false;
          }
        });
        menu.active = !menu.active;
      };

      var activeMenubar = function (name) {
        angular.forEach(menubar, function (item) {
          for (var i = 0; i < item.menus.length; i++) {
            if (item.menus[i].sref === name) {
              item.active = true;
            }
          }
        });
      };

      // 激活菜单
      if ($state.current && $state.current.name) {
        activeMenubar($state.current.name);
      }
      else {
        var removeEventListener = $rootScope.$on('$stateChangeSuccess', function (e, state, params) {
          activeMenubar(state.name);
          removeEventListener();
        });
      }
    }
  };
});

/**
 * 自动聚焦...
 */
app.directive('csFocus', function ($timeout) {
  return {
    restrict: 'A',
    replace: false,
    link: function (scope, element) {
      var times = 0;
      (function focus() {
        if (element.is(':visible')) {
          element.focus();
        }
        else if (times++ < 1) {
          $timeout(focus, 200);
        }
      }());
    }
  };
});

/**
 * 防止自动完成不触发form验证
 */
app.directive("csAutofill", function ($timeout) {
  return {
    require: '^ngModel',
    link: function (scope, element, attrs, ngModel) {
      var times = 0;
      var timer = null;
      var origin = element.val();

      (function fill() {
        if (element.val() !== origin) {
          ngModel.$setViewValue(element.val());
          element.focus();
        }
        else if (times++ < 3) {
          $timeout.cancel(timer);
          timer = $timeout(fill, 200);
        }
      }());

      scope.$on('$destroy', function () {
        $timeout.cancel(timer);
      });
    }
  };
});

// 多选checkbox 填值进入Array
app.directive('csCheckbox', function () {
  return {
    restrict: 'A',
    replace: false,
    scope: {
      list: '=',
      fill: '=',
      label: '@',
      value: '@'
    },
    templateUrl: 'config/templates/checkbox.partial.html',
    link: function (scope, element, attrs) {
      scope.fill = scope.fill || [];
      scope.toggleValue = function (value) {
        var index = scope.fill.indexOf(value);
        if (index > -1) {
          scope.fill.splice(index, 1);
        }
        else {
          scope.fill.push(value);
        }
      };
    }
  };
});

// 通用选择
app.directive('csSelect', function ($timeout, $http) {
  return {
    restrict: 'A',
    replace: true,
    scope: {
      associate: '=', // 关联到scope的哪个属性上
      url: '@', // 查询地址
      key: '@', // option的value 默认是id
      label: '@', // option中显示的文案 默认是name
      blank: '@', // 空白情况下显示的文案 默认是请选择
      type: '@', // 这个值和url互斥 既如果定义常量的话 不会发起ajax请求 可以问我
      params: '=', // 查询url额外的参数
      sname: '@', // select的name属性值
      required: '@', // 是否必选
      change: '&' // onchange
    },
    templateUrl: function (element, attrs) {
      return 'config/templates/select.partial.html';
    },
    link: function (scope, element, attrs) {
      scope.$key = scope.key || 'id';
      scope.$label = scope.label || 'name';
      scope.$blank = angular.isUndefined(scope.blank) ? '请选择' : scope.blank;

      if (scope.url) {
        $http({
          url: scope.url,
          params: scope.params
        }).then(function (res) {
          scope.list = res.list;

          // 如果默认没有提示 自动选择第一个
          if (scope.$blank === 'false' && res.list.length > 0) {
            if (scope.associate !== res.list[0][scope.key]) {
              // 触发change事件
              scope.associate = res.list[0][scope.key];
              $timeout(function () {
                scope.change();
              }, 50);
            }
          }
        });
      }
    }
  };
});
// 为了分割数组以便二次使用ng-repeat
// 通常需要的场景是你需要每隔N个元素插入分组节点
// 如果你修改items内部元素的属性 angular会自动watch更新
// 如果动态增删items的元素，要删除items.$rows，以便重新计算

app.filter('group', function () {
  return function (items, cols) {
    if (!items) {
      return items;
    }
    // if items be modified, delete cache
    if (items.$rows) {
      var temp = [];
      for (var i = 0; i < items.$rows.length; i++) {
        temp = temp.concat(items.$rows[i]);
      }

      if (temp.length !== items.length) {
        delete items.$rows;
      }
      else {
        for (var j = 0; j < items.length; j++) {
          if (items[j] !== temp[j]) {
            delete items.$rows;
            break;
          }
        }
      }
    }

    // cache rows for angular dirty check
    if (!items.$rows) {
      var rows = [];
      for (var k = 0; k < items.length; k++) {
        if (k % cols === 0) {
          rows.push([]);
        }
        rows[rows.length - 1].push(items[k]);
      }
      items.$rows = rows;
    }

    return items.$rows;
  };
});

// 判断是否是空白对象
app.filter('empty', function () {
  return function (obj) {
    return !obj || angular.equals({}, obj) || angular.equals([], obj);
  };
});

// 取两个数最小的
app.filter('min', function () {
  return function (num, limit) {
    return Math.min(num, limit);
  };
});

// 取两个数最大的
app.filter('max', function () {
  return function (num, limit) {
    return Math.max(num, limit);
  };
});

// 安全过滤 配合 ng-bind-html 使用
app.filter('safe', ['$sce',
  function ($sce) {
    return function (text) {
      return $sce.trustAsHtml(text);
    };
  }
]);

// 对象状态
app.filter('status', function () {
  return function (status, reversed) {
    if (/^\d$/.test(status)) {
      status = reversed ? (~status + 2) : status;
      return status === 0 ? '停用' : '启用';
    }
    else {
      status = reversed ? (status === 'stopped' ? 'using' : 'stopped') : status;
      return status === 'stopped' ? '停用' : '启用';
    }
  };
});

// 是否判断
app.filter('is', function () {
  return function (status, bool) {
    bool = angular.isUndefined(bool) ? true : bool;
    status = bool ? status : !status;
    return status ? '是' : '否';
  };
});
// 通用服务生成器 默认包含5种操作：CREATE UPDATE REMOVE TOGGLE QUERY
app.factory('serviceGenerator', function ($http, $injector) {

  return function () {

    var actions = {};

    // 代理CRUDT操作
    var proxy = function (name, params, data, method) {
      debugger;
      // var name = proxy.caller.toString().match(/^function\s*([^\s(]+)/)[1];
      var url = actions[name];
      if (!url) {
        throw new Error('<< ' + name + ' method action not config >>');
      }
      return $http({
        url: url,
        params: params || null,
        data: data || null,
        method: method ? method : (name === 'query' ? 'get' : 'post')
      });
    };

    var identity = function (data) {
      return angular.isObject(data) ? data.id : data;
    };

    // 封装好增删改查
    var service = {

      query: function (params) {
        return proxy('query', params, null);
      },

      create: function (data) {
        return proxy('create', null, data);
      },

      update: function (data) {
        return proxy('update', null, data);
      },

      remove: function (data) {
        return proxy('remove', null, identity(data));
      },

      toggle: function (data) {
        return proxy('toggle', null, {
          id: identity(data),
          status: data.status === 0 ? 1 : 0
        });
      },

      get: function (url, params) {
        return $http({
          url: url,
          params: params
        });
      },

      post: function (url, data) {
        return $http({
          url: url,
          data: data
        });
      },

      // 配置增删改查的地址
      $actions: function $actions() {
        angular.extend(actions, arguments[0]);

        angular.forEach(arguments[0], function (config, name) {
          if (typeof config !== 'string') {
            service[name] = function () {
              if (config.method && config.method.toLowerCase() === 'get') {
                return $http({
                  url: config.url,
                  params: arguments[0]
                });
              }
              return $http({
                url: config.url,
                data: arguments[0],
                method: 'post'
              });
            };
          }
        });
        return this;
      },

      // 配置其他方法
      $methods: function $methods() {
        angular.forEach($injector.invoke(arguments[0]), function (fn, name) {
          service[name] = fn.bind(service);
        });
        return this;
      }

    };

    return service;
  };

});

// 通用处理生成器 默认包含5种操作：CREATE UPDATE REMOVE TOGGLE QUERY
app.factory('controllerGenerator', function ($q, $injector, $modal, growl) {

  return function ($scope, service, config) {

    /** 
     * onfig should have:
     * title: '某某操作'
     * property: 用于提示文案的实体的主键名称，默认为 name
     * createTemplate: '创建实体的模板地址'
     * updateTemplate: '编辑实体的模板地址'
     */

    $scope.page = 1;
    $scope.size = 20;

    $scope.query = function query(arg) {

      // 删除之后到达阈值后会做静默翻页 防止页面出现空页面
      if (arg !== true) {
        $scope.list = [];
        $scope.loading = true;
      }

      // 添加额外参数 注：如果arg是boolean 此处不会影响
      var params = angular.extend({
        page: $scope.page,
        size: $scope.size
      }, arg);

      return service.query(params).then(function (res) {
        $scope.list = res.list;
        $scope.page = res.page;
        $scope.size = res.size;
        $scope.total = res.total;
        return $q.when(res);
      }, function (rej) {
        growl.addErrorMessage(rej.message || '服务器异常，请稍后再试！');
        return $q.reject(rej);
      })['finally'](function () {
        $scope.loading = false;
      });
    };

    $scope.create = function create() {
      $modal.open({
        templateUrl: config.createTemplate,
        controller: ['$scope',
          function (scope) {
            scope.title = '添加' + config.title;
            scope.entity = {};

            scope.confirm = function () {
              scope.creating = true;

              service.create(scope.entity).then(function (res) {
                $scope.query();
                growl.addSuccessMessage(scope.title + '成功！');
                return $q.when(res);
              }, function (rej) {
                growl.addErrorMessage(rej.message || scope.title + '失败！');
                return $q.reject(rej);
              })['finally'](function () {
                scope.creating = false;
                scope.$close();
              });

            };
          }
        ]
      });
    };

    $scope.update = function update(entity) {
      $modal.open({
        templateUrl: config.updateTemplate || config.modifyTemplate,
        controller: ['$scope',
          function (scope) {
            scope.title = '编辑' + config.title;
            scope.entity = angular.copy(entity);
            scope.confirm = function () {
              scope.updating = true;

              service.update(scope.entity).then(function (res) {
                angular.extend(entity, res.entity || scope.entity);
                growl.addSuccessMessage(scope.title + '成功!');
                return $q.when(res);
              }, function (rej) {
                growl.addErrorMessage(rej.message || scope.title + '失败！');
                return $q.reject(rej);
              })['finally'](function () {
                scope.updating = false;
                scope.$close();
              });
            };
          }
        ]
      });
    };

    $scope.remove = function remove(entity) {
      $modal.open({
        templateUrl: 'config/templates/delete.partial.html',
        controller: ['$scope',
          function (scope) {
            scope.title = '删除' + config.title;
            scope.entity = entity;
            scope.message = '<h4>您确定要删除' + config.title + ' ( <span class="text-warning">' + entity[config.property || 'name'] + '</span> ) 吗？</h4>';
            scope.confirm = function () {
              entity.deleting = true;

              service.remove(entity).then(function (res) {
                $scope.total -= 1;
                $scope.list.splice($scope.list.indexOf(entity), 1);

                // 阈值为 2/3，小于会自动reload当前页
                if ($scope.list.length < ($scope.size || 20) * 2 / 3) {
                  $scope.query(true);
                }
                growl.addSuccessMessage(scope.title + '成功!');
                return $q.when(res);
              }, function (rej) {
                growl.addErrorMessage(rej.message || scope.title + '失败！');
              })['finally'](function () {
                entity.deleting = false;
              });
              scope.$close();
            };
          }
        ]
      });
    };

    $scope.toggle = function toggle(entity) {
      entity.toggling = true;
      service.toggle(entity).then(function (res) {
        entity.status = entity.status === 0 ? 1 : 0;
        growl.addSuccessMessage('操作成功!');
        return $q.when(res);
      }, function (rej) {
        growl.addErrorMessage(rej.message || '操作失败！');
        return $q.reject(rej);
      })['finally'](function () {
        entity.toggling = false;
      });
    };

    $scope['delete'] = function (entity) {
      return $scope.remove(entity);
    };

    $scope.modify = function (entity) {
      return $scope.update(entity);
    };

    if (config.autoload) {
      $scope.query();
    }

    return $scope;

  };

});

app.factory('bootbox', function ($modal) {

  return {

    alert: function (message, fn) {
      $modal.open({
        templateUrl: 'common/templates/bootbox.partial.html',
        controller: function ($scope) {
          $scope.type = 'alert';
          $scope.message = message;

          $scope.confirm = function () {
            $scope.$close();
            return fn && fn();
          };
        }
      });
    },

    confirm: function (message, fn) {
      $modal.open({
        templateUrl: 'common/templates/bootbox.partial.html',
        controller: function ($scope) {
          $scope.type = 'confirm';
          $scope.message = message;

          $scope.confirm = function () {
            $scope.$close();
            return fn && fn();
          };
        }
      });
    }

  };
});
// define module
var biokersModule = Modules.register('biokersModule', ['app']);

// config routes
biokersModule.config(function ($stateProvider, $urlRouterProvider) {

  $urlRouterProvider.otherwise("/biokers/bioker");

  $stateProvider
    .state('biokers', {
      url: '/biokers',
      "abstract": true,
      templateUrl: "modules/biokers/templates/bioker.html",
    })
    .state('biokers.bioker', {
      url: '/bioker',
      templateUrl: "modules/biokers/templates/bioker.html",
      controller: 'biokerController'
    })
    .state('biokers.login', {
      url: '/login',
      templateUrl: "modules/biokers/templates/login.html",
      controller: 'loginController'
    });
});
biokersModule.controller('loginController', function ($scope, $state, biokerService) {

  $scope.remember = true;

  $scope.login = function () {
    $scope.processing = true;
    accountService.login({
      username: $scope.username,
      password: $scope.password,
      remember: $scope.remember
    }).then(function (res) {
      $scope.$emit('$initialize');
      $state.go('biokers.bioker');
    }, function (rej) {
      $scope.error = true;
    })['finally'](function () {
      $scope.processing = false;
    });
  };

});
// bioker
biokersModule.controller('biokerController', function ($scope, $state, $modal, growl, biokerService, controllerGenerator) {
  // 给$scope添加标准化CRUD操作
  biokerService.listShow().then(function (res) {
    $scope.list = res.list;
  });


  $scope.create = function (keep) {
      $modal.open({
        templateUrl: 'modules/biokers/templates/bioker.partial.html',
        controller: ['$scope',
          function (scope) {
            scope.title = '添加供方类型';
            scope.entity = {};

            scope.confirm = function () {
              scope.processing = true;

              service.create(scope.entity).then(function (res) {
                growl.addSuccessMessage(scope.title + "成功");
                $scope.page = 1;
                $scope.query();
              }, function (rej) {
                growl.addErrorMessage(rej.message);
              })['finally'](function () {
                scope.processing = false;
                scope.$close();
              });

            };
          }
        ]
      });
    };

  // 搜索
  $scope.search = function () {
    return $scope.query({
      name: $scope.name,
      name: $scope.name,
      name: $scope.name,
      name: $scope.name,
      name: $scope.name,
      name: $scope.name
    });
  };
});


biokersModule.factory('biokerService', function ($q,$http) {
  return {
    listShow: function () {
      return $http({
        url: '/biokers/member/list',
        method: 'get',
        cache: true
      });
    },
    login: function (username, password, remember) {
      return $q.when({
        code: 200
      });
    }
  };
});
angular.module('templates', ['config/templates/bootbox.partial.html', 'config/templates/checkbox.partial.html', 'config/templates/confirm.partial.html', 'config/templates/delete.partial.html', 'config/templates/layout.partial.html', 'config/templates/menubar.partial.html', 'config/templates/select.partial.html', 'modules/biokers/templates/bioker.html', 'modules/biokers/templates/bioker.partial.html', 'modules/biokers/templates/login.html']);

angular.module("config/templates/bootbox.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/bootbox.partial.html",
    "<div class=\"modal-body\" ng-bind-html=\"message|safe\"></div><div class=\"modal-footer\"><button class=\"btn btn-primary\" ng-click=\"confirm()\">确定</button> <button class=\"btn btn-default\" ng-click=\"$dismiss()\" ng-if=\"type === 'confirm'\">取消</button></div>");
}]);

angular.module("config/templates/checkbox.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/checkbox.partial.html",
    "<label class=\"checkbox-inline text-overflow\" ng-repeat=\"item in list\" title=\"{{ item[label] }}\"><input type=\"checkbox\" value=\"{{ item[value] }}\" ng-checked=\"fill.indexOf(item[value]) > -1\" ng-click=\"toggleValue(item[value])\"> {{ item[label] }}</label>");
}]);

angular.module("config/templates/confirm.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/confirm.partial.html",
    "<div class=\"modal-header\"><a class=\"close\" ng-click=\"$dismiss()\">&times;</a><h4 class=\"modal-title\">{{ title }}</h4></div><div class=\"modal-body\" ng-bind-html=\"message|safe\"></div><div class=\"modal-footer\"><button class=\"btn btn-primary\" ng-click=\"confirm()\" ng-disabled=\"processing\">{{ confirmText || '确定' }}</button> <button class=\"btn btn-default\" ng-click=\"$dismiss()\">取消</button></div>");
}]);

angular.module("config/templates/delete.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/delete.partial.html",
    "<div class=\"modal-header\"><a class=\"close\" ng-click=\"$dismiss()\">&times;</a><h4 class=\"modal-title\">{{ title }}</h4></div><div class=\"modal-body\" ng-bind-html=\"message|safe\"></div><div class=\"modal-footer\"><button class=\"btn btn-danger\" ng-click=\"confirm()\" ng-disabled=\"item.deleting\">{{ confirmText || '删除' }}</button> <button class=\"btn btn-default\" ng-click=\"$dismiss()\">取消</button></div>");
}]);

angular.module("config/templates/layout.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/layout.partial.html",
    "<div ng-if=\"!$layout\" ui-view></div><div ng-if=\"$layout &amp;&amp; $user\"><header id=\"header\"><div class=\"container-fluid\"><a href=\"/\" class=\"brand link-white pull-left\"><img ng-src=\"{{ $host }}/server/images/logo.png\" class=\"logo\" alt=\"多美贷\"> 多美贷</a><div class=\"settings pull-right\"><span class=\"dropdown\"><a class=\"dropdown-toggle link-white\" href=\"\"><span class=\"text-right name\">{{ $user.nick }}</span> <span class=\"caret\"></span></a><ul class=\"dropdown-menu pull-right\"><li><a ui-sref=\"account.settings\"><i class=\"fa fa-cog text-muted\"></i> 设置</a></li><li><a ui-sref=\"account.logout\"><i class=\"fa fa-power-off text-muted\"></i> 退出</a></li></ul></span></div></div></header><section id=\"content\"><aside class=\"sidebar\" cs-menubar></aside><div class=\"main\"><div growl></div><div ui-view></div></div></section><footer id=\"footer\"></footer></div>");
}]);

angular.module("config/templates/menubar.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/menubar.partial.html",
    "<ul class=\"menus list-unstyled\"><li><a ui-sref=\"home\"><i class=\"fa fa-home\"></i>菜单导航{{ $location.hash }}</a></li><li ng-repeat=\"item in menubar\" ng-click=\"toggleMenu(item)\" ng-class=\"{active: item.active}\"><a href=\"\"><i class=\"fa fa-cog\"></i>{{ item.name }} <i class=\"fa pull-right\" ng-class=\"{'fa-angle-right': !item.active, 'fa-angle-down': item.active}\"></i></a><ul class=\"sub-menu list-unstyled\" ng-click=\"$event.stopPropagation()\"><li ng-repeat=\"menu in item.menus\" ui-sref-active=\"active\"><a ng-href=\"{{ menu.href }}\">{{ menu.name }}</a></li></ul></li></ul>");
}]);

angular.module("config/templates/select.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("config/templates/select.partial.html",
    "<select class=\"form-control\" ng-model=\"associate\" name=\"{{ sname }}\" ng-required=\"{{ required }}\" ng-change=\"change()\"><option value=\"\" ng-if=\"$blank !== 'false'\">{{ $blank }}</option><option ng-repeat=\"item in list\" value=\"{{ item[$key] }}\">{{ item[$label] }}</option></select>");
}]);

angular.module("modules/biokers/templates/bioker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("modules/biokers/templates/bioker.html",
    "<div class=\"account-module\"><div class=\"page-header\"><h1>经纪人列表</h1></div><div class=\"filter clearfix\"><div class=\"row\"><div class=\"col-sm-9\"><form class=\"form-inline\" ng-submit=\"search()\"><div class=\"form-group mb10 mr10\"><label class=\"control-label text-normal text-nowrap\">ID：</label><input type=\"text\" class=\"form-control\" ng-model=\"id\"><label class=\"control-label text-normal text-nowrap\">姓名：</label><input type=\"text\" class=\"form-control\" ng-model=\"name\"><label class=\"control-label text-normal text-nowrap\">手机号：</label><input type=\"text\" class=\"form-control\" ng-model=\"phone\"><label class=\"control-label text-normal text-nowrap\">时间：</label><input type=\"text\" class=\"form-control\" ng-model=\"stime\"><label class=\"control-label text-normal text-nowrap\" style=\"width:8px\">-</label><input type=\"text\" class=\"form-control\" ng-model=\"etime\"></div><div class=\"form-group mb10 mr10\"><label class=\"control-label text-normal text-nowrap\">类别：</label><select class=\"form-control\" ng-model=\"type\"><option value=\"0\">全部</option><option value=\"1\">全职</option><option value=\"2\">兼职</option></select><label class=\"control-label text-normal text-nowrap\">状态：</label><select class=\"form-control\" ng-model=\"state\"><option value=\"0\">全部</option><option value=\"1\">在职</option><option value=\"2\">离职</option></select></div><div class=\"mb10 mr10\"><button type=\"submit\" class=\"btn btn-primary ml10\" ng-disabled=\"form.$invalid\"><i class=\"fa fa-search\"></i> 搜索</button></div></form></div><div class=\"col-sm-3 text-right\"><a class=\"btn btn-success\" ng-click=\"create()\"><i class=\"fa fa-plus\"></i> 添加</a></div></div></div><table class=\"table table-hover\"><thead><tr><th>序号</th><th>ID</th><th>姓名</th><th>昵称</th><th>手机号</th><th>推荐人数（注册）</th><th>被推荐客户投资总额（元）</th><th>时间</th><th>类别</th><th>状态</th><th class=\"text-right\">操作</th></tr></thead><tbody><tr ng-if=\"loading\"><td class=\"loading-holder\" colspan=\"40\"><div class=\"text-center\"><span class=\"loading\"></span></div></td></tr><tr ng-if=\"total === 0\"><td colspan=\"40\"><div class=\"text-center\">抱歉，没有相关数据</div></td></tr><tr ng-repeat=\"item in list\"><td>{{ item.name }}</td><td><a href=\"\" ng-click=\"update(item)\">查看</a></td><td>{{ item.update_at|date:'yyyy-MM-dd HH:mm' }}</td><td>{{ item.update_by }}</td><td>{{ item.create_at|date:'yyyy-MM-dd HH:mm' }}</td><td>{{ item.create_by }}</td><td ng-class=\"{'text-danger': item.status === 0}\">{{ item.status|status }}</td><td class=\"text-right\"><a href=\"\" ng-click=\"toggle(item)\" ng-if=\"!item.toggling\">{{ item.status|status }}</a> <span class=\"loading-sm\" ng-if=\"item.toggling\"></span> <i class=\"text-divider\">|</i> <a href=\"\" ng-click=\"update(item)\" ng-if=\"!item.updating\">修改</a> <span class=\"loading-sm\" ng-if=\"item.updating\"></span> <i class=\"text-divider\">|</i> <a href=\"\" ng-click=\"remove(item)\" ng-if=\"!item.deleting\">删除</a> <span class=\"loading-sm\" ng-if=\"item.deleting\"></span></td></tr></tbody></table><div class=\"text-right\" ng-show=\"total\"><ul class=\"pagination-sm\" pagination ng-model=\"page\" items-per-page=\"size\" total-items=\"total\" ng-change=\"query()\"></ul></div></div>");
}]);

angular.module("modules/biokers/templates/bioker.partial.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("modules/biokers/templates/bioker.partial.html",
    "<div class=\"modal-header\"><a class=\"close\" ng-click=\"$dismiss()\">&times;</a><h4 class=\"modal-title\">{{ title }}</h4></div><div class=\"modal-body\">HElLO {{ count }}</div><div class=\"modal-footer\"><button class=\"btn btn-primary\" ng-click=\"confirm()\" ng-disabled=\"item.processing\">更新</button> <button class=\"btn btn-default\" ng-click=\"$dismiss()\">取消</button></div>");
}]);

angular.module("modules/biokers/templates/login.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("modules/biokers/templates/login.html",
    "<div id=\"login\" ng-cloak cs-animate><div class=\"content center-block\"><form method=\"post\" name=\"form\" ng-submit=\"login()\"><h3 class=\"form-title\"><img src=\"/img/logo.png\" alt=\"logo\"> 多美贷管理平台</h3><div class=\"alert alert-danger\" ng-if=\"error\"><button type=\"button\" class=\"close\" ng-click=\"$parent.error=false\" title=\"关闭\">&times;</button> <span><i class=\"fa fa-info-circle fa-lg\"></i> 账号或密码错误</span></div><div class=\"form-group\"><div class=\"input-group\" ng-class=\"{'ng-dirty': form.username.$dirty, 'ng-valid': form.username.$valid, 'ng-invalid': form.username.$invalid}\"><div class=\"input-group-addon\"><i class=\"fa fa-envelope\"></i></div><input class=\"form-control\" type=\"text\" placeholder=\"账号\" name=\"username\" ng-model=\"username\" cs-focus autofocus required></div><p class=\"text-danger\" ng-if=\"form.username.$dirty &amp;&amp; form.username.$invalid\"><i class=\"fa fa-exclamation-circle\"></i> 请输入您的账号</p></div><div class=\"form-group\"><div class=\"input-group\" ng-class=\"{'ng-dirty': form.password.$dirty, 'ng-valid': form.password.$valid, 'ng-invalid': form.password.$invalid}\"><div class=\"input-group-addon\"><i class=\"fa fa-lock\"></i></div><input class=\"form-control\" type=\"password\" placeholder=\"密码\" name=\"password\" ng-model=\"password\" cs-autofill required></div><p class=\"text-danger\" ng-if=\"form.password.$dirty &amp;&amp; form.password.$invalid\"><i class=\"fa fa-exclamation-circle\"></i> 请输入您的密码</p></div><div class=\"form-group clearfix\"><label class=\"pull-left\"><input type=\"checkbox\" name=\"remember\" ng-model=\"remember\" value=\"true\"> 保持登录</label><a href=\"\" class=\"pull-right\">忘记密码？</a></div><div class=\"form-group text-center\"><button class=\"btn btn-success btn-block\" type=\"submit\" ng-disabled=\"form.$invalid || processing\"><span ng-if=\"!processing\">立即登录</span> <span ng-if=\"processing\">正在登录</span></button></div></form><div class=\"copyright small text-center text-muted\">2014 &copy; 千丁互联 &nbsp; 京ICP备14022431号-1</div></div></div>");
}]);
